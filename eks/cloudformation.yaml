AWSTemplateFormatVersion: "2010-09-09"
Description: Resources used by pray
Parameters:
  ClusterName:
    Type: String
    Description: "EKS cluster name"
  ClusterVersion:
    Type: String
    Description: "EKS cluster version"
  LatestEksId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: !Sub "/aws/service/eks/optimized-ami/${ClusterVersion}/amazon-linux-2/recommended/image_id"

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.4.0.0/16
  VpcIpv6:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref Vpc
  SubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Sub "{AWS::Region}a"
      MapPublicIpOnLaunch: true
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 12 ] ]
      Ipv6CidrBlock: !Select [ 0, !Cidr [ !Select [ 0, !GetAtt Vpc.Ipv6CidrBlocks], 16, 64 ] ]
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: public-a
  SubnetPrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "{AWS::Region}a"
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 12 ] ]
      Ipv6CidrBlock: !Select [ 1, !Cidr [ !Select [ 0, !GetAtt Vpc.Ipv6CidrBlocks], 16, 64 ] ]
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: private-a
        - Key: karpenter.sh/discovery
          Value: cluster-us-west-2
  SubnetPrivateB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "{AWS::Region}b"
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 12 ] ]
      Ipv6CidrBlock: !Select [ 2, !Cidr [ !Select [ 0, !GetAtt Vpc.Ipv6CidrBlocks], 16, 64 ] ]
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: private-b
        - Key: karpenter.sh/discovery
          Value: cluster-us-west-2
  SubnetPrivateC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "{AWS::Region}c"
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 12 ] ]
      Ipv6CidrBlock: !Select [ 3, !Cidr [ !Select [ 0, !GetAtt Vpc.Ipv6CidrBlocks], 16, 64 ] ]
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: private-c
        - Key: karpenter.sh/discovery
          Value: cluster-us-west-2
  SubnetPrivateD:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "{AWS::Region}d"
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt Vpc.CidrBlock, 16, 12 ] ]
      Ipv6CidrBlock: !Select [ 4, !Cidr [ !Select [ 0, !GetAtt Vpc.Ipv6CidrBlocks], 16, 64 ] ]
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: private-d
        - Key: karpenter.sh/discovery
          Value: cluster-us-west-2
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: public-gateway
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: public
      VpcId: !Ref Vpc
  SubnetPublicARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicA
  RouteInternetGateway:
     Type: AWS::EC2::Route
     Properties:
        RouteTableId: !Ref RouteTablePublic
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: !Ref GatewayId
  RouteInternetGatewayIpv6:
     Type: AWS::EC2::Route
     Properties:
        RouteTableId: !Ref RouteTablePublic
        DestinationIpv6CidrBlock: '::/0'
        GatewayId: !Ref GatewayId
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: public
      SubnetId: !Ref SubnetPublicA
      Tags:
        - Key: Name
          Value: nat-gateway
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: private
      VpcId: !Ref Vpc
  SubnetPrivateARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivateA
  SubnetPrivateBRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivateB
  SubnetPrivateCRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivateC
  SubnetPrivateDRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivateD
  RouteNatGateway:
     Type: AWS::EC2::Route
     Properties:
        RouteTableId: !Ref RouteTablePrivate
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NatGateway
  RouteNatGatewayIpv6:
     Type: AWS::EC2::Route
     Properties:
        RouteTableId: !Ref RouteTablePrivate
        DestinationIpv6CidrBlock: '::/0'
        NatGatewayId: !Ref NatGateway

  SecurityGroupInternetAccess:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: internet-access
      GroupDescription: Allow machines to access the internet
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIpv6: ::/0
      Tags:
        - Key: karpenter.sh/discovery
        - Value: !Sub "${ClusterName}"
  SecurityGroupLocalAccess:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: local-access
      GroupDescription: Allow local machines to talk to each other
      VpcId: !Ref Vpc
      Tags:
        - Key: karpenter.sh/discovery
        - Value: !Sub "${ClusterName}"
  SecurityGroupLocalAccessEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - SecurityGroupLocalAccess
          - GroupId
      GroupId:
        Fn::GetAtt:
          - SecurityGroupLocalAccess
          - GroupId
  SecurityGroupLocalAccessIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SecurityGroupLocalAccess
          - GroupId
      GroupId:
        Fn::GetAtt:
          - SecurityGroupLocalAccess
          - GroupId
  SecurityGroupSsh:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: allow-ssh-from-anywhere
      GroupDescription: Allow machines to receive SSH traffic
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIpv6: ::/0

  SecurityGroupEksControlPlane:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "eks-control-plane-${ClusterName}"
      GroupDescription: Allow the control plane to talk to itself
      VpcId: !Ref Vpc
  SecurityGroupEksControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId:
        Fn::GetAtt:
          - SecurityGroupEksControlPlane
          - GroupId
      GroupId:
        Fn::GetAtt:
          - SecurityGroupEksControlPlane
          - GroupId
  SecurityGroupEksNode:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow nodes to access the control plane
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          DestinationSecurityGroupId:
            Fn::GetAtt:
              - SecurityGroupEksControlPlane
              - GroupId

  Cluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub "${ClusterName}"
      Version: !Sub "${ClusterVersion}"
      ResourcesVpcConfig:
        EndpointPrivateAccess: true
        EndpointPublicAccess: false
        SecurityGroupIds:
          - !Ref SecurityGroupEksControlPlane
          - !Ref SecurityGroupInternetAccess # TODO(april): is this required?
          - !Ref SecurityGroupLocalAccess
        SubnetIds:
          - !Ref SubnetPrivateA
          - !Ref SubnetPrivateB
          - !Ref SubnetPrivateC
          - !Ref SubnetPrivateD
  ClusterNodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "eks-node-${ClusterName}"
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                !Sub "ec2.${AWS::URLSuffix}"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
  ClusterNodeAccess:
    Type: AWS::EKS::AccessEntry
    Properties:
      ClusterName: !Sub "${ClusterName}"
      PrincipalArn: !Ref ClusterNodeRole
      Username: "system:node:{{EC2PrivateDNSName}}"
      KubernetesGroups:
        - system:bootstrappers
        - system:nodes
  ClusterBaseNodeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName:
        LaunchTemplateName: !Sub "eks-base-node-group-${ClusterName}"
        ImageId: !Sub "${LatestEksId}"
        InstanceType: t3.medium
        LaunchTemplateData:
          SecurityGroupIds:
            - !Ref SecurityGroupEksNode
            - !Ref SecurityGroupInternetAccess
            - !Ref SecurityGroupLocalAccess
  ClusterBaseNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      NodegroupName: eks-base-node-group
      ClusterName: !Sub "${ClusterName}"
      LaunchTemplate: !Ref ClusterBaseNodeLaunchTemplate
      NodeRole: !Ref ClusterNodeRole
      ScalingConfig:
        MinSize: 1
        DesiredSize: 1
        MaxSize: 2
      Subnets:
        - !Ref SubnetPrivateA
        - !Ref SubnetPrivateB
        - !Ref SubnetPrivateC
        - !Ref SubnetPrivateD

  KarpenterControllerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "KarpenterControllerPolicy-${ClusterName}"
      # The PolicyDocument must be in JSON string format because we use a StringEquals condition that uses an interpolated
      # value in one of its key parameters which isn't natively supported by CloudFormation
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowScopedEC2InstanceActions",
              "Effect": "Allow",
              "Resource": [
                "arn:${AWS::Partition}:ec2:${AWS::Region}::image/*",
                "arn:${AWS::Partition}:ec2:${AWS::Region}::snapshot/*",
                "arn:${AWS::Partition}:ec2:${AWS::Region}:*:security-group/*",
                "arn:${AWS::Partition}:ec2:${AWS::Region}:*:subnet/*",
                "arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*"
              ],
              "Action": [
                "ec2:RunInstances",
                "ec2:CreateFleet"
              ]
            },
            {
              "Sid": "AllowScopedEC2InstanceActionsWithTags",
              "Effect": "Allow",
              "Resource": [
                "arn:${AWS::Partition}:ec2:${AWS::Region}:*:fleet/*",
                "arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*",
                "arn:${AWS::Partition}:ec2:${AWS::Region}:*:volume/*",
                "arn:${AWS::Partition}:ec2:${AWS::Region}:*:network-interface/*",
                "arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*",
                "arn:${AWS::Partition}:ec2:${AWS::Region}:*:spot-instances-request/*"
              ],
              "Action": [
                "ec2:RunInstances",
                "ec2:CreateFleet",
                "ec2:CreateLaunchTemplate"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:RequestTag/kubernetes.io/cluster/${ClusterName}": "owned"
                },
                "StringLike": {
                  "aws:RequestTag/karpenter.sh/nodepool": "*"
                }
              }
            },
            {
              "Sid": "AllowScopedResourceCreationTagging",
              "Effect": "Allow",
              "Resource": [
                "arn:${AWS::Partition}:ec2:${AWS::Region}:*:fleet/*",
                "arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*",
                "arn:${AWS::Partition}:ec2:${AWS::Region}:*:volume/*",
                "arn:${AWS::Partition}:ec2:${AWS::Region}:*:network-interface/*",
                "arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*",
                "arn:${AWS::Partition}:ec2:${AWS::Region}:*:spot-instances-request/*"
              ],
              "Action": "ec2:CreateTags",
              "Condition": {
                "StringEquals": {
                  "aws:RequestTag/kubernetes.io/cluster/${ClusterName}": "owned",
                  "ec2:CreateAction": [
                    "RunInstances",
                    "CreateFleet",
                    "CreateLaunchTemplate"
                  ]
                },
                "StringLike": {
                  "aws:RequestTag/karpenter.sh/nodepool": "*"
                }
              }
            },
            {
              "Sid": "AllowScopedResourceTagging",
              "Effect": "Allow",
              "Resource": "arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*",
              "Action": "ec2:CreateTags",
              "Condition": {
                "StringEquals": {
                  "aws:ResourceTag/kubernetes.io/cluster/${ClusterName}": "owned"
                },
                "StringLike": {
                  "aws:ResourceTag/karpenter.sh/nodepool": "*"
                },
                "ForAllValues:StringEquals": {
                  "aws:TagKeys": [
                    "karpenter.sh/nodeclaim",
                    "Name"
                  ]
                }
              }
            },
            {
              "Sid": "AllowScopedDeletion",
              "Effect": "Allow",
              "Resource": [
                "arn:${AWS::Partition}:ec2:${AWS::Region}:*:instance/*",
                "arn:${AWS::Partition}:ec2:${AWS::Region}:*:launch-template/*"
              ],
              "Action": [
                "ec2:TerminateInstances",
                "ec2:DeleteLaunchTemplate"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:ResourceTag/kubernetes.io/cluster/${ClusterName}": "owned"
                },
                "StringLike": {
                  "aws:ResourceTag/karpenter.sh/nodepool": "*"
                }
              }
            },
            {
              "Sid": "AllowRegionalReadActions",
              "Effect": "Allow",
              "Resource": "*",
              "Action": [
                "ec2:DescribeAvailabilityZones",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceTypeOfferings",
                "ec2:DescribeInstanceTypes",
                "ec2:DescribeLaunchTemplates",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSpotPriceHistory",
                "ec2:DescribeSubnets"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:RequestedRegion": "${AWS::Region}"
                }
              }
            },
            {
              "Sid": "AllowSSMReadActions",
              "Effect": "Allow",
              "Resource": "arn:${AWS::Partition}:ssm:${AWS::Region}::parameter/aws/service/*",
              "Action": "ssm:GetParameter"
            },
            {
              "Sid": "AllowPricingReadActions",
              "Effect": "Allow",
              "Resource": "*",
              "Action": "pricing:GetProducts"
            },
            {
              "Sid": "AllowInterruptionQueueActions",
              "Effect": "Allow",
              "Resource": "${KarpenterInterruptionQueue.Arn}",
              "Action": [
                "sqs:DeleteMessage",
                "sqs:GetQueueUrl",
                "sqs:ReceiveMessage"
              ]
            },
            {
              "Sid": "AllowPassingInstanceRole",
              "Effect": "Allow",
              "Resource": "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/KarpenterNode-${ClusterName}",
              "Action": "iam:PassRole",
              "Condition": {
                "StringEquals": {
                  "iam:PassedToService": "ec2.amazonaws.com"
                }
              }
            },
            {
              "Sid": "AllowScopedInstanceProfileCreationActions",
              "Effect": "Allow",
              "Resource": "*",
              "Action": [
                "iam:CreateInstanceProfile"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:RequestTag/kubernetes.io/cluster/${ClusterName}": "owned",
                  "aws:RequestTag/topology.kubernetes.io/region": "${AWS::Region}"
                },
                "StringLike": {
                  "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass": "*"
                }
              }
            },
            {
              "Sid": "AllowScopedInstanceProfileTagActions",
              "Effect": "Allow",
              "Resource": "*",
              "Action": [
                "iam:TagInstanceProfile"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:ResourceTag/kubernetes.io/cluster/${ClusterName}": "owned",
                  "aws:ResourceTag/topology.kubernetes.io/region": "${AWS::Region}",
                  "aws:RequestTag/kubernetes.io/cluster/${ClusterName}": "owned",
                  "aws:RequestTag/topology.kubernetes.io/region": "${AWS::Region}"
                },
                "StringLike": {
                  "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass": "*",
                  "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass": "*"
                }
              }
            },
            {
              "Sid": "AllowScopedInstanceProfileActions",
              "Effect": "Allow",
              "Resource": "*",
              "Action": [
                "iam:AddRoleToInstanceProfile",
                "iam:RemoveRoleFromInstanceProfile",
                "iam:DeleteInstanceProfile"
              ],
              "Condition": {
                "StringEquals": {
                  "aws:ResourceTag/kubernetes.io/cluster/${ClusterName}": "owned",
                  "aws:ResourceTag/topology.kubernetes.io/region": "${AWS::Region}"
                },
                "StringLike": {
                  "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass": "*"
                }
              }
            },
            {
              "Sid": "AllowInstanceProfileReadActions",
              "Effect": "Allow",
              "Resource": "*",
              "Action": "iam:GetInstanceProfile"
            },
            {
              "Sid": "AllowAPIServerEndpointDiscovery",
              "Effect": "Allow",
              "Resource": "arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}",
              "Action": "eks:DescribeCluster"
            }
          ]
        }
  KarpenterPodRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "KarpenterPod-${ClusterName}"
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                !Sub "pods.eks.${AWS::URLSuffix}"
            Action:
              - "sts:AssumeRole"
              - "sts:TagSession"
      ManagedPolicyArns:
        - !Ref KarpenterControllerPolicy
  KarpenterPodIdentityAssociation:
    Type: AWS::EKS::PodIdentityAssociation
    Properties:
      ClusterName: !Sub "${ClusterName}"
      Namespace: kube-system
      RoleArn: !Ref KarpenterPodRole
      ServiceAccount: karpenter

  KarpenterInterruptionQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ClusterName}"
      MessageRetentionPeriod: 300
      SqsManagedSseEnabled: true
  KarpenterInterruptionQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref KarpenterInterruptionQueue
      PolicyDocument:
        Id: EC2InterruptionPolicy
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
                - sqs.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt KarpenterInterruptionQueue.Arn
  ScheduledChangeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
          - aws.health
        detail-type:
          - AWS Health Event
      Targets:
        - Id: KarpenterInterruptionQueueTarget
          Arn: !GetAtt KarpenterInterruptionQueue.Arn
  SpotInterruptionRule:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Spot Instance Interruption Warning
      Targets:
        - Id: KarpenterInterruptionQueueTarget
          Arn: !GetAtt KarpenterInterruptionQueue.Arn
  RebalanceRule:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Instance Rebalance Recommendation
      Targets:
        - Id: KarpenterInterruptionQueueTarget
          Arn: !GetAtt KarpenterInterruptionQueue.Arn
  InstanceStateChangeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Instance State-change Notification
      Targets:
        - Id: KarpenterInterruptionQueueTarget
          Arn: !GetAtt KarpenterInterruptionQueue.Arn
